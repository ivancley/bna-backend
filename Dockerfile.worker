# Usar imagem que j√° tem Chrome instalado
FROM selenium/standalone-chrome:latest

# Define diret√≥rio de trabalho
WORKDIR /app

# Vari√°veis de ambiente Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Instala depend√™ncias do sistema necess√°rias
USER root
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    netcat-openbsd \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copia requirements e instala depend√™ncias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copia c√≥digo da aplica√ß√£o
COPY . .

# Cria entrypoint do worker diretamente no Dockerfile
RUN echo '#!/bin/bash' > /entrypoint-worker.sh && \
    echo 'set -e' >> /entrypoint-worker.sh && \
    echo 'echo "üßπ Limpando processos Chrome √≥rf√£os..."' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chrome 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chromedriver 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'rm -rf /tmp/chrome* /tmp/selenium* 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando PostgreSQL estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z postgres 5432; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ PostgreSQL ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ PostgreSQL est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando Redis estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z redis 6379; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ Redis ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ Redis est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üöÄ Iniciando Celery Worker (Queue: scraping)..."' >> /entrypoint-worker.sh && \
    echo 'exec "$@"' >> /entrypoint-worker.sh && \
    chmod +x /entrypoint-worker.sh

# Verifica qual usu√°rio existe na imagem e cria se necess√°rio
RUN id selenium 2>/dev/null || (groupadd -r selenium && useradd -r -g selenium selenium)

# Cria usu√°rio n√£o-root para seguran√ßa
RUN chown -R selenium:selenium /app

# CORRE√á√ÉO: Criar diret√≥rios com permiss√µes corretas para Selenium
RUN mkdir -p /tmp/chrome && chmod 1777 /tmp/chrome
RUN mkdir -p /tmp/selenium_cache && chmod 755 /tmp/selenium_cache
RUN mkdir -p /home/selenium/.cache && chmod 755 /home/selenium/.cache
RUN chown -R selenium:selenium /tmp/chrome /tmp/selenium_cache /home/selenium/.cache

USER selenium

# Usa entrypoint para aguardar servi√ßos
ENTRYPOINT ["/entrypoint-worker.sh"]

# Comando padr√£o: inicia Celery worker apenas para queue scraping
CMD ["celery", "-A", "api.utils.celery_app", "worker", "--loglevel=info", "-Q", "scraping", "--concurrency=1", "--pool=prefork"]