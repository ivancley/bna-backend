# Usar imagem Ubuntu 22.04 como base
FROM ubuntu:22.04

# Define diret√≥rio de trabalho
WORKDIR /app

# Vari√°veis de ambiente Python
ENV PIP_PREFER_BINARY=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1
RUN python3 -m pip install --upgrade pip setuptools wheel

# Instalar depend√™ncias b√°sicas do sistema
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential g++ gfortran \
    && rm -rf /var/lib/apt/lists/*

# Instalar Google Chrome
RUN wget -q -O /tmp/google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
    && apt-get update && apt-get install -y /tmp/google-chrome.deb \
    && rm /tmp/google-chrome.deb \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Instalar ChromeDriver (compat√≠vel com a vers√£o do Chrome instalada)
RUN CHROME_MAJOR=$(google-chrome --version | sed -E 's/.* ([0-9]+)\..*/\1/') \
    && echo "Chrome major: $CHROME_MAJOR" \
    && CDVER=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR}) \
    && wget -q -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CDVER}/chromedriver_linux64.zip" \
    && unzip /tmp/chromedriver.zip -d /usr/local/bin/ \
    && chmod +x /usr/local/bin/chromedriver \
    && rm /tmp/chromedriver.zip

# Verifica instala√ß√£o do Chrome
RUN google-chrome --version

# Atualiza pip e instala depend√™ncias Python
COPY requirements.txt .

RUN sed -i 's/^numpy==2\.3\.4$/numpy==2.2.6/' requirements.txt


RUN python3 -m pip install --upgrade pip setuptools wheel \
 && pip3 install --only-binary=:all: --no-cache-dir -r requirements.txt

# Copia c√≥digo da aplica√ß√£o
COPY . .

# Cria entrypoint do worker diretamente no Dockerfile
RUN echo '#!/bin/bash' > /entrypoint-worker.sh && \
    echo 'set -e' >> /entrypoint-worker.sh && \
    echo 'echo "üßπ Limpando processos Chrome √≥rf√£os..."' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chrome 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chromedriver 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'rm -rf /tmp/chrome* /tmp/selenium* 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando PostgreSQL estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z postgres 5432; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ PostgreSQL ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ PostgreSQL est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando Redis estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z redis 6379; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ Redis ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ Redis est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üöÄ Iniciando Celery Worker (Queue: scraping)..."' >> /entrypoint-worker.sh && \
    echo 'exec "$@"' >> /entrypoint-worker.sh && \
    chmod +x /entrypoint-worker.sh

# Cria usu√°rio n√£o-root para seguran√ßa
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app

# CORRE√á√ÉO: Criar diret√≥rios com permiss√µes corretas para Selenium
RUN mkdir -p /tmp/chrome && chmod 1777 /tmp/chrome
RUN mkdir -p /tmp/selenium_cache && chmod 755 /tmp/selenium_cache
RUN mkdir -p /home/appuser/.cache && chmod 755 /home/appuser/.cache
RUN chown -R appuser:appuser /tmp/chrome /tmp/selenium_cache /home/appuser/.cache

USER appuser

# Usa entrypoint para aguardar servi√ßos
ENTRYPOINT ["/entrypoint-worker.sh"]

# Comando padr√£o: inicia Celery worker apenas para queue scraping
CMD ["celery", "-A", "api.utils.celery_app", "worker", "--loglevel=info", "-Q", "scraping", "--concurrency=1", "--pool=prefork"]