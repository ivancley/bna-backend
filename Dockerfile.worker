# Usar imagem Python com Chrome instalado
FROM python:3.13-slim

# Define diret√≥rio de trabalho
WORKDIR /app

# Vari√°veis de ambiente Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Instala depend√™ncias do sistema incluindo Chrome
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    netcat-openbsd \
    wget \
    gnupg \
    unzip \
    curl \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    xdg-utils \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Adiciona reposit√≥rio do Google Chrome (m√©todo atualizado)
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list

# Instala Google Chrome
RUN apt-get update && apt-get install -y \
    google-chrome-stable \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Verifica instala√ß√£o do Chrome
RUN google-chrome --version

# Copia requirements e instala depend√™ncias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copia c√≥digo da aplica√ß√£o
COPY . .

# Cria entrypoint do worker diretamente no Dockerfile
RUN echo '#!/bin/bash' > /entrypoint-worker.sh && \
    echo 'set -e' >> /entrypoint-worker.sh && \
    echo 'echo "üßπ Limpando processos Chrome √≥rf√£os..."' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chrome 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chromedriver 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'rm -rf /tmp/chrome* /tmp/selenium* 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando PostgreSQL estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z postgres 5432; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ PostgreSQL ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ PostgreSQL est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando Redis estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z redis 6379; do' >> /entrypoint-worker.sh && \
    echo '  echo "‚è≥ Redis ainda n√£o est√° pronto - aguardando..."' >> /entrypoint-worker.sh && \
    echo '  sleep 2' >> /entrypoint-worker.sh && \
    echo 'done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ Redis est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üöÄ Iniciando Celery Worker (Queue: scraping)..."' >> /entrypoint-worker.sh && \
    echo 'exec "$@"' >> /entrypoint-worker.sh && \
    chmod +x /entrypoint-worker.sh

# Cria usu√°rio n√£o-root para seguran√ßa
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app

# CORRE√á√ÉO: Criar diret√≥rios com permiss√µes corretas para Selenium
RUN mkdir -p /tmp/chrome && chmod 1777 /tmp/chrome
RUN mkdir -p /tmp/selenium_cache && chmod 755 /tmp/selenium_cache
RUN mkdir -p /home/appuser/.cache && chmod 755 /home/appuser/.cache
RUN chown -R appuser:appuser /tmp/chrome /tmp/selenium_cache /home/appuser/.cache

USER appuser

# Usa entrypoint para aguardar servi√ßos
ENTRYPOINT ["/entrypoint-worker.sh"]

# Comando padr√£o: inicia Celery worker apenas para queue scraping
CMD ["celery", "-A", "api.utils.celery_app", "worker", "--loglevel=info", "-Q", "scraping", "--concurrency=1", "--pool=prefork"]