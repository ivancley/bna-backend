FROM ubuntu:22.04

# Diret√≥rio de trabalho
WORKDIR /app

# Evitar prompts e preferir wheels no pip
ENV DEBIAN_FRONTEND=noninteractive \
    PIP_PREFER_BINARY=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# --- 1) Sistema, libs do Chrome, toolchain e Python ---
RUN apt-get update && apt-get install -y --no-install-recommends \
    bash ca-certificates curl wget unzip gnupg \
    netcat-openbsd \
    # libs necess√°rias p/ Chrome
    libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 \
    libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libxss1 \
    fonts-liberation xdg-utils \
    # drivers gr√°ficos (evitam erros de runtime)
    libx11-xcb1 libxcb-dri3-0 libxcb-present0 libxcb-sync1 libxcb-xfixes0 libxshmfence1 \
    libedit2 libgbm1 libelf1 libdrm2 libdrm-amdgpu1 libdrm-common \
    # toolchain (caso algum pacote Python precise compilar)
    build-essential g++ gfortran \
    # Python 3 + pip + headers
    python3 python3-pip python3-dev \
 && rm -rf /var/lib/apt/lists/*

# Atualiza pip e ferramentas de build Python
RUN python3 -m pip install --upgrade pip setuptools wheel

# --- 2) Instalar Google Chrome (stable) ---
RUN wget -q -O /tmp/google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
 && apt-get update && apt-get install -y /tmp/google-chrome.deb \
 && rm /tmp/google-chrome.deb \
 && rm -rf /var/lib/apt/lists/*

# Verifica vers√£o do Chrome (exibe no build log)
RUN google-chrome --version

# --- 3) ChromeDriver via Chrome for Testing (mesma vers√£o do Chrome) ---
# OBS: n√£o usar mais chromedriver.storage.googleapis.com/LATEST_RELEASE_* (legado)
RUN set -eux; \
  CHROME_VERSION="$(google-chrome --version | awk '{print $3}')" ; \
  OS=linux64 ; \
  BASE_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/${OS}" ; \
  echo "Chrome: ${CHROME_VERSION}  |  Baixando: ${BASE_URL}/chromedriver-${OS}.zip" ; \
  wget -q -O /tmp/chromedriver.zip "${BASE_URL}/chromedriver-${OS}.zip" ; \
  unzip -q /tmp/chromedriver.zip -d /opt/chromedriver ; \
  mv /opt/chromedriver/chromedriver-${OS}/chromedriver /usr/local/bin/chromedriver ; \
  chmod +x /usr/local/bin/chromedriver ; \
  rm -rf /opt/chromedriver /tmp/chromedriver.zip

# --- 4) Depend√™ncias Python do projeto ---
COPY requirements.txt .

# Corrige pin inexistente do numpy (2.3.4 n√£o existe no PyPI)
RUN sed -i 's/^numpy==2\.3\.4$/numpy==2.2.6/' requirements.txt

# Instala requirements (preferindo wheels)
RUN python3 -m pip install --upgrade pip setuptools wheel \
 && pip3 install --only-binary=:all: --no-cache-dir -r requirements.txt

# --- 5) C√≥digo da aplica√ß√£o ---
COPY . .

# --- 6) Entrypoint do worker (aguarda Postgres e Redis) ---
RUN echo '#!/bin/bash' > /entrypoint-worker.sh && \
    echo 'set -e' >> /entrypoint-worker.sh && \
    echo 'echo "üßπ Limpando processos Chrome √≥rf√£os..."' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chrome 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'pkill -9 -f chromedriver 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'rm -rf /tmp/chrome* /tmp/selenium* 2>/dev/null || true' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando PostgreSQL estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z postgres 5432; do echo "‚è≥ Aguardando PostgreSQL..."; sleep 2; done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ PostgreSQL est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üîÑ Aguardando Redis estar pronto..."' >> /entrypoint-worker.sh && \
    echo 'until nc -z redis 6379; do echo "‚è≥ Aguardando Redis..."; sleep 2; done' >> /entrypoint-worker.sh && \
    echo 'echo "‚úÖ Redis est√° pronto!"' >> /entrypoint-worker.sh && \
    echo 'echo "üöÄ Iniciando Celery Worker (Queue: scraping)..."' >> /entrypoint-worker.sh && \
    echo 'exec "$@"' >> /entrypoint-worker.sh && \
    chmod +x /entrypoint-worker.sh

# --- 7) Usu√°rio n√£o-root + permiss√µes e caches do Selenium/Chrome ---
RUN groupadd -r appuser && useradd -r -g appuser appuser \
 && mkdir -p /tmp/chrome /tmp/selenium_cache /home/appuser/.cache \
 && chmod 1777 /tmp/chrome \
 && chmod 755 /tmp/selenium_cache /home/appuser/.cache \
 && chown -R appuser:appuser /app /tmp/chrome /tmp/selenium_cache /home/appuser/.cache

USER appuser

# Entrypoint aguarda servi√ßos e delega ao comando
ENTRYPOINT ["/entrypoint-worker.sh"]

# Comando padr√£o: Celery worker (queue scraping)
CMD ["celery", "-A", "api.utils.celery_app", "worker", "--loglevel=info", "-Q", "scraping", "--concurrency=1", "--pool=prefork"]