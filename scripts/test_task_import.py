#!/usr/bin/env python
"""
Script para testar se a task pode ser importada corretamente.
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

def main():
    """Testa a importa√ß√£o da task."""
    
    print("=" * 70)
    print("üß™ TESTANDO IMPORTA√á√ÉO DA TASK")
    print("=" * 70)
    
    try:
        print("\n1Ô∏è‚É£ Importando celery_app...")
        from api.utils.celery_app import celery_app
        print("   ‚úÖ celery_app importado com sucesso")
        
        print("\n2Ô∏è‚É£ Importando scrape_url_task...")
        from api.v1.web_link.celery.tasks import scrape_url_task
        print("   ‚úÖ scrape_url_task importado com sucesso")
        
        print(f"\n3Ô∏è‚É£ Nome da task: {scrape_url_task.name}")
        
        print("\n4Ô∏è‚É£ Verificando se est√° registrada no celery_app...")
        if scrape_url_task.name in celery_app.tasks:
            print(f"   ‚úÖ Task '{scrape_url_task.name}' est√° registrada!")
        else:
            print(f"   ‚ùå Task '{scrape_url_task.name}' N√ÉO est√° registrada!")
            print("\n   Tasks dispon√≠veis:")
            for task_name in sorted(celery_app.tasks.keys()):
                if 'web_link' in task_name or 'scrape' in task_name:
                    print(f"      - {task_name}")
        
        print("\n5Ô∏è‚É£ Testando chamada da task (sem executar)...")
        # Apenas verifica se pode criar a signature
        signature = scrape_url_task.s("test-id", "http://example.com")
        print(f"   ‚úÖ Signature criada: {signature}")
        
        print("\n" + "=" * 70)
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        print("\n" + "=" * 70)
        sys.exit(1)

if __name__ == "__main__":
    main()

